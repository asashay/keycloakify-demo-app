name: ci
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  test:
    name: Test with on ${{ matrix.os }}
    runs-on: ${{matrix.os}}
    if: github.event.head_commit.author.name != 'actions'
    strategy:
      matrix:
       #os: [ windows-latest, ubuntu-latest ]
       os: [ ubuntu-latest ]
    outputs:
      keycloakify_version: ${{ steps.step1.outputs.out }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
    - run: |
        yarn --frozen-lockfile                                                                                                                                                                                        
        yarn build
#       yarn test
    - uses: actions/upload-artifact@v2
      if: ${{ matrix.os == 'ubuntu-latest' }}
      with:
        name: build
        path: build
    - id: step1
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        echo ::set-output name=out::$(
          node -e 'console.log(require("./node_modules/keycloakify/package.json")["version"])'
        )

  github_pages:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: build
        path: build
    - uses: actions/setup-node@v2.1.3
      with:
        node-version: '15'
    - run: git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${{github.repository}}.git
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: npx -y -p gh-pages@3.1.0 gh-pages -d build -u "github-actions-bot <actions@github.com>"

  check_if_version_upgraded:
    name: Check if version upgrade
    runs-on: ubuntu-latest
    needs: test
    outputs:
      from_version: ${{ steps.step1.outputs.from_version }}
      to_version: ${{ steps.step1.outputs.to_version }}
      is_upgraded_version: ${{steps.step1.outputs.is_upgraded_version }}
      branch: ${{steps.step2.outputs.branch }}
    steps:
    - uses: garronej/github_actions_toolkit@v2.1
      id: step1
      with: 
        action_name: is_package_json_version_upgraded
    - name: Get branch name
      id: step2
      run: |
        echo ::set-output name=branch::$(
          [ "$GITHUB_EVENT_NAME" == "pull_request" ] &&
            echo "$GITHUB_HEAD_REF" ||
            echo "${GITHUB_REF#refs/*/}"
        )

  docker:
    name: Build Docker image 
    needs: check_if_version_upgraded
    runs-on: ubuntu-latest
    # Build the docker image only if it's a push on master or if it's a PR from a branch (and not a PR from a fork)
    # It would be more straightforward to test if secrets.DOCKERHUB_TOKEN is defined but GitHub Action don't allow it.
    if: ${{ github.event_name == 'push' || github.event.pull_request.head.repo.owner.login == github.event.pull_request.base.repo.owner.login }}
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Computing Docker image tags
        id: step1
        env: 
          IS_UPGRADED_VERSION: ${{ needs.check_if_version_upgraded.outputs.is_upgraded_version }}
          TO_VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
          BRANCH: ${{ needs.check_if_version_upgraded.outputs.branch }}
        run: |
          OUT=$GITHUB_REPOSITORY:$BRANCH
          if [ "$IS_UPGRADED_VERSION" = "true" ]; then
            OUT=$OUT,$GITHUB_REPOSITORY:$TO_VERSION,$GITHUB_REPOSITORY:latest
          fi
          OUT=$(echo "$OUT" | awk '{print tolower($0)}') 
          echo ::set-output name=docker_tags::$OUT
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - run: tar -cvf build.tar ./build
      - uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: ${{ steps.step1.outputs.docker_tags }}
          file: Dockerfile.ci


  build_keycloak_theme:
    name: Build keycloak theme
    runs-on: ubuntu-latest
    needs: 
      - check_if_version_upgraded
      - test
    if: ${{ needs.check_if_version_upgraded.outputs.is_upgraded_version == 'true' }}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ needs.check_if_version_upgraded.outputs.branch }}
    - uses: actions/setup-node@v1
      with:
        node-version: '15'
    - uses: actions/download-artifact@v2
      with:
        name: build
        path: build
    - run: npx -y -p keycloakify@$VER build-keycloak-theme --external-assets
      env: 
        VER: ${{ needs.test.outputs.keycloakify_version }}
    - name: Upload keycloak theme
      uses: actions/upload-artifact@v2
      with:
        name: keycloak_theme
        path: build_keycloak/target/*keycloak-theme*.jar

  update_changelog:
    name: Update CHANGELOG.md
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs:
      - build_keycloak_theme
      - docker
      - check_if_version_upgraded
    steps:
    - uses: garronej/github_actions_toolkit@v2.1
      with:
        action_name: update_changelog
        branch: ${{Â needs.check_if_version_upgraded.outputs.branch }}
        commit_author_email: actions@github.com

  release:
    runs-on: ubuntu-latest
    needs: 
      - update_changelog
      - check_if_version_upgraded
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ needs.check_if_version_upgraded.outputs.branch }}
    - name: Download keycloak_theme
      uses: actions/download-artifact@v2
      with:
        name: keycloak_theme
    - run: mv *keycloak-theme*.jar keycloak-theme.jar
    - name: Build GitHub release body
      id: step1
      run: |
        if [ "$FROM_VERSION" = "0.0.0" ]; then
            echo "::set-output name=body::ðŸš€"
        else
            echo "::set-output name=body::ðŸ“‹ [CHANGELOG](https://github.com/$GITHUB_REPOSITORY/blob/v$TO_VERSION/CHANGELOG.md)"
        fi
      env: 
        FROM_VERSION: ${{ needs.check_if_version_upgraded.outputs.from_version }}
        TO_VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
    - name: Create Release
      uses: garronej/action-gh-release@8eb01d050288728124e879e2e724873f39433141
      with:
        name: Release v${{ needs.check_if_version_upgraded.outputs.to_version }}
        tag_name: v${{ needs.check_if_version_upgraded.outputs.to_version }}
        target_commitish: ${{ needs.check_if_version_upgraded.outputs.branch }}
        files: keycloak-theme.jar
        body: ${{ steps.step1.outputs.body }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 


  #debug:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Show envs
  #      run: env
  #    - name: Dump GitHub context
  #      env:
  #        GITHUB_CONTEXT: ${{ toJSON(github) }}
  #      run: echo "$GITHUB_CONTEXT"
  #    - name: Dump job context
  #      env:
  #        JOB_CONTEXT: ${{ toJSON(job) }}
  #      run: echo "$JOB_CONTEXT"
  #    - name: Dump steps context
  #      env:
  #        STEPS_CONTEXT: ${{ toJSON(steps) }}
  #      run: echo "$STEPS_CONTEXT"
  #    - name: Dump runner context
  #      env:
  #        RUNNER_CONTEXT: ${{ toJSON(runner) }}
  #      run: echo "$RUNNER_CONTEXT"
  #    - name: Dump strategy context
  #      env:
  #        STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
  #      run: echo "$STRATEGY_CONTEXT"
  #    - name: Dump matrix context
  #      env:
  #        MATRIX_CONTEXT: ${{ toJSON(matrix) }}
  #      run: echo "$MATRIX_CONTEXT"
  #    - name: Dump secret context
  #      env:
  #        SECRETS_CONTEXT: ${{ toJSON(secrets) }}
  #      run: echo "$SECRETS_CONTEXT"
